// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: device/v3/device.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2fv3_2fdevice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_device_2fv3_2fdevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_device_2fv3_2fdevice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2fv3_2fdevice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_device_2fv3_2fdevice_2eproto;
namespace Device {
namespace V3 {
class DoRequest;
struct DoRequestDefaultTypeInternal;
extern DoRequestDefaultTypeInternal _DoRequest_default_instance_;
class DoResponse;
struct DoResponseDefaultTypeInternal;
extern DoResponseDefaultTypeInternal _DoResponse_default_instance_;
class OpenReply;
struct OpenReplyDefaultTypeInternal;
extern OpenReplyDefaultTypeInternal _OpenReply_default_instance_;
class OpenRequest;
struct OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
}  // namespace V3
}  // namespace Device
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Device {
namespace V3 {

// ===================================================================


// -------------------------------------------------------------------

class OpenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Device.V3.OpenRequest) */ {
 public:
  inline OpenRequest() : OpenRequest(nullptr) {}
  ~OpenRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenRequest(const OpenRequest& from) : OpenRequest(nullptr, from) {}
  inline OpenRequest(OpenRequest&& from) noexcept
      : OpenRequest(nullptr, std::move(from)) {}
  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
        &_OpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OpenRequest& a, OpenRequest& b) { a.Swap(&b); }
  inline void Swap(OpenRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenRequest& from) { OpenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Device.V3.OpenRequest"; }

 protected:
  explicit OpenRequest(::google::protobuf::Arena* arena);
  OpenRequest(::google::protobuf::Arena* arena, const OpenRequest& from);
  OpenRequest(::google::protobuf::Arena* arena, OpenRequest&& from) noexcept
      : OpenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceUriFieldNumber = 1,
    kDeviceGroupFieldNumber = 2,
  };
  // string deviceUri = 1;
  void clear_deviceuri() ;
  const std::string& deviceuri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceuri(Arg_&& arg, Args_... args);
  std::string* mutable_deviceuri();
  PROTOBUF_NODISCARD std::string* release_deviceuri();
  void set_allocated_deviceuri(std::string* value);

  private:
  const std::string& _internal_deviceuri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceuri(
      const std::string& value);
  std::string* _internal_mutable_deviceuri();

  public:
  // string deviceGroup = 2;
  void clear_devicegroup() ;
  const std::string& devicegroup() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicegroup(Arg_&& arg, Args_... args);
  std::string* mutable_devicegroup();
  PROTOBUF_NODISCARD std::string* release_devicegroup();
  void set_allocated_devicegroup(std::string* value);

  private:
  const std::string& _internal_devicegroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicegroup(
      const std::string& value);
  std::string* _internal_mutable_devicegroup();

  public:
  // @@protoc_insertion_point(class_scope:Device.V3.OpenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr deviceuri_;
    ::google::protobuf::internal::ArenaStringPtr devicegroup_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2fv3_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class OpenReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Device.V3.OpenReply) */ {
 public:
  inline OpenReply() : OpenReply(nullptr) {}
  ~OpenReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenReply(const OpenReply& from) : OpenReply(nullptr, from) {}
  inline OpenReply(OpenReply&& from) noexcept
      : OpenReply(nullptr, std::move(from)) {}
  inline OpenReply& operator=(const OpenReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenReply& operator=(OpenReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenReply* internal_default_instance() {
    return reinterpret_cast<const OpenReply*>(
        &_OpenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(OpenReply& a, OpenReply& b) { a.Swap(&b); }
  inline void Swap(OpenReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenReply& from) { OpenReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Device.V3.OpenReply"; }

 protected:
  explicit OpenReply(::google::protobuf::Arena* arena);
  OpenReply(::google::protobuf::Arena* arena, const OpenReply& from);
  OpenReply(::google::protobuf::Arena* arena, OpenReply&& from) noexcept
      : OpenReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kRetCodeFieldNumber = 2,
    kRetContextFieldNumber = 3,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string retCode = 2;
  void clear_retcode() ;
  const std::string& retcode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retcode(Arg_&& arg, Args_... args);
  std::string* mutable_retcode();
  PROTOBUF_NODISCARD std::string* release_retcode();
  void set_allocated_retcode(std::string* value);

  private:
  const std::string& _internal_retcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retcode(
      const std::string& value);
  std::string* _internal_mutable_retcode();

  public:
  // string retContext = 3;
  void clear_retcontext() ;
  const std::string& retcontext() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retcontext(Arg_&& arg, Args_... args);
  std::string* mutable_retcontext();
  PROTOBUF_NODISCARD std::string* release_retcontext();
  void set_allocated_retcontext(std::string* value);

  private:
  const std::string& _internal_retcontext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retcontext(
      const std::string& value);
  std::string* _internal_mutable_retcontext();

  public:
  // @@protoc_insertion_point(class_scope:Device.V3.OpenReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr retcode_;
    ::google::protobuf::internal::ArenaStringPtr retcontext_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2fv3_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Device.V3.DoResponse) */ {
 public:
  inline DoResponse() : DoResponse(nullptr) {}
  ~DoResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DoResponse(const DoResponse& from) : DoResponse(nullptr, from) {}
  inline DoResponse(DoResponse&& from) noexcept
      : DoResponse(nullptr, std::move(from)) {}
  inline DoResponse& operator=(const DoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoResponse& operator=(DoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoResponse* internal_default_instance() {
    return reinterpret_cast<const DoResponse*>(
        &_DoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DoResponse& a, DoResponse& b) { a.Swap(&b); }
  inline void Swap(DoResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DoResponse& from) { DoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DoResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Device.V3.DoResponse"; }

 protected:
  explicit DoResponse(::google::protobuf::Arena* arena);
  DoResponse(::google::protobuf::Arena* arena, const DoResponse& from);
  DoResponse(::google::protobuf::Arena* arena, DoResponse&& from) noexcept
      : DoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceUriFieldNumber = 1,
    kRetCodeFieldNumber = 2,
    kReqNameFieldNumber = 3,
    kRespResultFieldNumber = 4,
    kReqTransactionFieldNumber = 5,
    kRetContextFieldNumber = 6,
  };
  // string deviceUri = 1;
  void clear_deviceuri() ;
  const std::string& deviceuri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceuri(Arg_&& arg, Args_... args);
  std::string* mutable_deviceuri();
  PROTOBUF_NODISCARD std::string* release_deviceuri();
  void set_allocated_deviceuri(std::string* value);

  private:
  const std::string& _internal_deviceuri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceuri(
      const std::string& value);
  std::string* _internal_mutable_deviceuri();

  public:
  // string retCode = 2;
  void clear_retcode() ;
  const std::string& retcode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retcode(Arg_&& arg, Args_... args);
  std::string* mutable_retcode();
  PROTOBUF_NODISCARD std::string* release_retcode();
  void set_allocated_retcode(std::string* value);

  private:
  const std::string& _internal_retcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retcode(
      const std::string& value);
  std::string* _internal_mutable_retcode();

  public:
  // string reqName = 3;
  void clear_reqname() ;
  const std::string& reqname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqname(Arg_&& arg, Args_... args);
  std::string* mutable_reqname();
  PROTOBUF_NODISCARD std::string* release_reqname();
  void set_allocated_reqname(std::string* value);

  private:
  const std::string& _internal_reqname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqname(
      const std::string& value);
  std::string* _internal_mutable_reqname();

  public:
  // string respResult = 4;
  void clear_respresult() ;
  const std::string& respresult() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_respresult(Arg_&& arg, Args_... args);
  std::string* mutable_respresult();
  PROTOBUF_NODISCARD std::string* release_respresult();
  void set_allocated_respresult(std::string* value);

  private:
  const std::string& _internal_respresult() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_respresult(
      const std::string& value);
  std::string* _internal_mutable_respresult();

  public:
  // string reqTransaction = 5;
  void clear_reqtransaction() ;
  const std::string& reqtransaction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqtransaction(Arg_&& arg, Args_... args);
  std::string* mutable_reqtransaction();
  PROTOBUF_NODISCARD std::string* release_reqtransaction();
  void set_allocated_reqtransaction(std::string* value);

  private:
  const std::string& _internal_reqtransaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqtransaction(
      const std::string& value);
  std::string* _internal_mutable_reqtransaction();

  public:
  // string retContext = 6;
  void clear_retcontext() ;
  const std::string& retcontext() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retcontext(Arg_&& arg, Args_... args);
  std::string* mutable_retcontext();
  PROTOBUF_NODISCARD std::string* release_retcontext();
  void set_allocated_retcontext(std::string* value);

  private:
  const std::string& _internal_retcontext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retcontext(
      const std::string& value);
  std::string* _internal_mutable_retcontext();

  public:
  // @@protoc_insertion_point(class_scope:Device.V3.DoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      86, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DoResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DoResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr deviceuri_;
    ::google::protobuf::internal::ArenaStringPtr retcode_;
    ::google::protobuf::internal::ArenaStringPtr reqname_;
    ::google::protobuf::internal::ArenaStringPtr respresult_;
    ::google::protobuf::internal::ArenaStringPtr reqtransaction_;
    ::google::protobuf::internal::ArenaStringPtr retcontext_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2fv3_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Device.V3.DoRequest) */ {
 public:
  inline DoRequest() : DoRequest(nullptr) {}
  ~DoRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DoRequest(const DoRequest& from) : DoRequest(nullptr, from) {}
  inline DoRequest(DoRequest&& from) noexcept
      : DoRequest(nullptr, std::move(from)) {}
  inline DoRequest& operator=(const DoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoRequest& operator=(DoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoRequest* internal_default_instance() {
    return reinterpret_cast<const DoRequest*>(
        &_DoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DoRequest& a, DoRequest& b) { a.Swap(&b); }
  inline void Swap(DoRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DoRequest& from) { DoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DoRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Device.V3.DoRequest"; }

 protected:
  explicit DoRequest(::google::protobuf::Arena* arena);
  DoRequest(::google::protobuf::Arena* arena, const DoRequest& from);
  DoRequest(::google::protobuf::Arena* arena, DoRequest&& from) noexcept
      : DoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceUriFieldNumber = 1,
    kReqNameFieldNumber = 2,
    kReqParamFieldNumber = 3,
    kReqTransactionFieldNumber = 4,
    kReqClientIDFieldNumber = 5,
  };
  // string deviceUri = 1;
  void clear_deviceuri() ;
  const std::string& deviceuri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceuri(Arg_&& arg, Args_... args);
  std::string* mutable_deviceuri();
  PROTOBUF_NODISCARD std::string* release_deviceuri();
  void set_allocated_deviceuri(std::string* value);

  private:
  const std::string& _internal_deviceuri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceuri(
      const std::string& value);
  std::string* _internal_mutable_deviceuri();

  public:
  // string reqName = 2;
  void clear_reqname() ;
  const std::string& reqname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqname(Arg_&& arg, Args_... args);
  std::string* mutable_reqname();
  PROTOBUF_NODISCARD std::string* release_reqname();
  void set_allocated_reqname(std::string* value);

  private:
  const std::string& _internal_reqname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqname(
      const std::string& value);
  std::string* _internal_mutable_reqname();

  public:
  // string reqParam = 3;
  void clear_reqparam() ;
  const std::string& reqparam() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqparam(Arg_&& arg, Args_... args);
  std::string* mutable_reqparam();
  PROTOBUF_NODISCARD std::string* release_reqparam();
  void set_allocated_reqparam(std::string* value);

  private:
  const std::string& _internal_reqparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqparam(
      const std::string& value);
  std::string* _internal_mutable_reqparam();

  public:
  // string reqTransaction = 4;
  void clear_reqtransaction() ;
  const std::string& reqtransaction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqtransaction(Arg_&& arg, Args_... args);
  std::string* mutable_reqtransaction();
  PROTOBUF_NODISCARD std::string* release_reqtransaction();
  void set_allocated_reqtransaction(std::string* value);

  private:
  const std::string& _internal_reqtransaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqtransaction(
      const std::string& value);
  std::string* _internal_mutable_reqtransaction();

  public:
  // string reqClientID = 5;
  void clear_reqclientid() ;
  const std::string& reqclientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reqclientid(Arg_&& arg, Args_... args);
  std::string* mutable_reqclientid();
  PROTOBUF_NODISCARD std::string* release_reqclientid();
  void set_allocated_reqclientid(std::string* value);

  private:
  const std::string& _internal_reqclientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqclientid(
      const std::string& value);
  std::string* _internal_mutable_reqclientid();

  public:
  // @@protoc_insertion_point(class_scope:Device.V3.DoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      77, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DoRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DoRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr deviceuri_;
    ::google::protobuf::internal::ArenaStringPtr reqname_;
    ::google::protobuf::internal::ArenaStringPtr reqparam_;
    ::google::protobuf::internal::ArenaStringPtr reqtransaction_;
    ::google::protobuf::internal::ArenaStringPtr reqclientid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2fv3_2fdevice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpenRequest

// string deviceUri = 1;
inline void OpenRequest::clear_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.ClearToEmpty();
}
inline const std::string& OpenRequest::deviceuri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.OpenRequest.deviceUri)
  return _internal_deviceuri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenRequest::set_deviceuri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.OpenRequest.deviceUri)
}
inline std::string* OpenRequest::mutable_deviceuri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deviceuri();
  // @@protoc_insertion_point(field_mutable:Device.V3.OpenRequest.deviceUri)
  return _s;
}
inline const std::string& OpenRequest::_internal_deviceuri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deviceuri_.Get();
}
inline void OpenRequest::_internal_set_deviceuri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(value, GetArena());
}
inline std::string* OpenRequest::_internal_mutable_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deviceuri_.Mutable( GetArena());
}
inline std::string* OpenRequest::release_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.OpenRequest.deviceUri)
  return _impl_.deviceuri_.Release();
}
inline void OpenRequest::set_allocated_deviceuri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceuri_.IsDefault()) {
          _impl_.deviceuri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.OpenRequest.deviceUri)
}

// string deviceGroup = 2;
inline void OpenRequest::clear_devicegroup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicegroup_.ClearToEmpty();
}
inline const std::string& OpenRequest::devicegroup() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.OpenRequest.deviceGroup)
  return _internal_devicegroup();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenRequest::set_devicegroup(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicegroup_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.OpenRequest.deviceGroup)
}
inline std::string* OpenRequest::mutable_devicegroup() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devicegroup();
  // @@protoc_insertion_point(field_mutable:Device.V3.OpenRequest.deviceGroup)
  return _s;
}
inline const std::string& OpenRequest::_internal_devicegroup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devicegroup_.Get();
}
inline void OpenRequest::_internal_set_devicegroup(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicegroup_.Set(value, GetArena());
}
inline std::string* OpenRequest::_internal_mutable_devicegroup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devicegroup_.Mutable( GetArena());
}
inline std::string* OpenRequest::release_devicegroup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.OpenRequest.deviceGroup)
  return _impl_.devicegroup_.Release();
}
inline void OpenRequest::set_allocated_devicegroup(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicegroup_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicegroup_.IsDefault()) {
          _impl_.devicegroup_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.OpenRequest.deviceGroup)
}

// -------------------------------------------------------------------

// OpenReply

// string message = 1;
inline void OpenReply::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OpenReply::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.OpenReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.OpenReply.message)
}
inline std::string* OpenReply::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Device.V3.OpenReply.message)
  return _s;
}
inline const std::string& OpenReply::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void OpenReply::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* OpenReply::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* OpenReply::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.OpenReply.message)
  return _impl_.message_.Release();
}
inline void OpenReply::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.OpenReply.message)
}

// string retCode = 2;
inline void OpenReply::clear_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.ClearToEmpty();
}
inline const std::string& OpenReply::retcode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.OpenReply.retCode)
  return _internal_retcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenReply::set_retcode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.OpenReply.retCode)
}
inline std::string* OpenReply::mutable_retcode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retcode();
  // @@protoc_insertion_point(field_mutable:Device.V3.OpenReply.retCode)
  return _s;
}
inline const std::string& OpenReply::_internal_retcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retcode_.Get();
}
inline void OpenReply::_internal_set_retcode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.Set(value, GetArena());
}
inline std::string* OpenReply::_internal_mutable_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retcode_.Mutable( GetArena());
}
inline std::string* OpenReply::release_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.OpenReply.retCode)
  return _impl_.retcode_.Release();
}
inline void OpenReply::set_allocated_retcode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.retcode_.IsDefault()) {
          _impl_.retcode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.OpenReply.retCode)
}

// string retContext = 3;
inline void OpenReply::clear_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.ClearToEmpty();
}
inline const std::string& OpenReply::retcontext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.OpenReply.retContext)
  return _internal_retcontext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenReply::set_retcontext(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.OpenReply.retContext)
}
inline std::string* OpenReply::mutable_retcontext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retcontext();
  // @@protoc_insertion_point(field_mutable:Device.V3.OpenReply.retContext)
  return _s;
}
inline const std::string& OpenReply::_internal_retcontext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retcontext_.Get();
}
inline void OpenReply::_internal_set_retcontext(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.Set(value, GetArena());
}
inline std::string* OpenReply::_internal_mutable_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retcontext_.Mutable( GetArena());
}
inline std::string* OpenReply::release_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.OpenReply.retContext)
  return _impl_.retcontext_.Release();
}
inline void OpenReply::set_allocated_retcontext(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.retcontext_.IsDefault()) {
          _impl_.retcontext_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.OpenReply.retContext)
}

// -------------------------------------------------------------------

// DoRequest

// string deviceUri = 1;
inline void DoRequest::clear_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.ClearToEmpty();
}
inline const std::string& DoRequest::deviceuri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoRequest.deviceUri)
  return _internal_deviceuri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoRequest::set_deviceuri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoRequest.deviceUri)
}
inline std::string* DoRequest::mutable_deviceuri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deviceuri();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoRequest.deviceUri)
  return _s;
}
inline const std::string& DoRequest::_internal_deviceuri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deviceuri_.Get();
}
inline void DoRequest::_internal_set_deviceuri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(value, GetArena());
}
inline std::string* DoRequest::_internal_mutable_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deviceuri_.Mutable( GetArena());
}
inline std::string* DoRequest::release_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoRequest.deviceUri)
  return _impl_.deviceuri_.Release();
}
inline void DoRequest::set_allocated_deviceuri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceuri_.IsDefault()) {
          _impl_.deviceuri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoRequest.deviceUri)
}

// string reqName = 2;
inline void DoRequest::clear_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.ClearToEmpty();
}
inline const std::string& DoRequest::reqname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoRequest.reqName)
  return _internal_reqname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoRequest::set_reqname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoRequest.reqName)
}
inline std::string* DoRequest::mutable_reqname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqname();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoRequest.reqName)
  return _s;
}
inline const std::string& DoRequest::_internal_reqname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqname_.Get();
}
inline void DoRequest::_internal_set_reqname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.Set(value, GetArena());
}
inline std::string* DoRequest::_internal_mutable_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqname_.Mutable( GetArena());
}
inline std::string* DoRequest::release_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoRequest.reqName)
  return _impl_.reqname_.Release();
}
inline void DoRequest::set_allocated_reqname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqname_.IsDefault()) {
          _impl_.reqname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoRequest.reqName)
}

// string reqParam = 3;
inline void DoRequest::clear_reqparam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqparam_.ClearToEmpty();
}
inline const std::string& DoRequest::reqparam() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoRequest.reqParam)
  return _internal_reqparam();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoRequest::set_reqparam(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqparam_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoRequest.reqParam)
}
inline std::string* DoRequest::mutable_reqparam() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqparam();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoRequest.reqParam)
  return _s;
}
inline const std::string& DoRequest::_internal_reqparam() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqparam_.Get();
}
inline void DoRequest::_internal_set_reqparam(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqparam_.Set(value, GetArena());
}
inline std::string* DoRequest::_internal_mutable_reqparam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqparam_.Mutable( GetArena());
}
inline std::string* DoRequest::release_reqparam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoRequest.reqParam)
  return _impl_.reqparam_.Release();
}
inline void DoRequest::set_allocated_reqparam(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqparam_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqparam_.IsDefault()) {
          _impl_.reqparam_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoRequest.reqParam)
}

// string reqTransaction = 4;
inline void DoRequest::clear_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.ClearToEmpty();
}
inline const std::string& DoRequest::reqtransaction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoRequest.reqTransaction)
  return _internal_reqtransaction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoRequest::set_reqtransaction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoRequest.reqTransaction)
}
inline std::string* DoRequest::mutable_reqtransaction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqtransaction();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoRequest.reqTransaction)
  return _s;
}
inline const std::string& DoRequest::_internal_reqtransaction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqtransaction_.Get();
}
inline void DoRequest::_internal_set_reqtransaction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.Set(value, GetArena());
}
inline std::string* DoRequest::_internal_mutable_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqtransaction_.Mutable( GetArena());
}
inline std::string* DoRequest::release_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoRequest.reqTransaction)
  return _impl_.reqtransaction_.Release();
}
inline void DoRequest::set_allocated_reqtransaction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqtransaction_.IsDefault()) {
          _impl_.reqtransaction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoRequest.reqTransaction)
}

// string reqClientID = 5;
inline void DoRequest::clear_reqclientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqclientid_.ClearToEmpty();
}
inline const std::string& DoRequest::reqclientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoRequest.reqClientID)
  return _internal_reqclientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoRequest::set_reqclientid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqclientid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoRequest.reqClientID)
}
inline std::string* DoRequest::mutable_reqclientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqclientid();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoRequest.reqClientID)
  return _s;
}
inline const std::string& DoRequest::_internal_reqclientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqclientid_.Get();
}
inline void DoRequest::_internal_set_reqclientid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqclientid_.Set(value, GetArena());
}
inline std::string* DoRequest::_internal_mutable_reqclientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqclientid_.Mutable( GetArena());
}
inline std::string* DoRequest::release_reqclientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoRequest.reqClientID)
  return _impl_.reqclientid_.Release();
}
inline void DoRequest::set_allocated_reqclientid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqclientid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqclientid_.IsDefault()) {
          _impl_.reqclientid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoRequest.reqClientID)
}

// -------------------------------------------------------------------

// DoResponse

// string deviceUri = 1;
inline void DoResponse::clear_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.ClearToEmpty();
}
inline const std::string& DoResponse::deviceuri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.deviceUri)
  return _internal_deviceuri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_deviceuri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.deviceUri)
}
inline std::string* DoResponse::mutable_deviceuri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deviceuri();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.deviceUri)
  return _s;
}
inline const std::string& DoResponse::_internal_deviceuri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deviceuri_.Get();
}
inline void DoResponse::_internal_set_deviceuri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deviceuri_.Mutable( GetArena());
}
inline std::string* DoResponse::release_deviceuri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.deviceUri)
  return _impl_.deviceuri_.Release();
}
inline void DoResponse::set_allocated_deviceuri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deviceuri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceuri_.IsDefault()) {
          _impl_.deviceuri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.deviceUri)
}

// string retCode = 2;
inline void DoResponse::clear_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.ClearToEmpty();
}
inline const std::string& DoResponse::retcode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.retCode)
  return _internal_retcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_retcode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.retCode)
}
inline std::string* DoResponse::mutable_retcode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retcode();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.retCode)
  return _s;
}
inline const std::string& DoResponse::_internal_retcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retcode_.Get();
}
inline void DoResponse::_internal_set_retcode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retcode_.Mutable( GetArena());
}
inline std::string* DoResponse::release_retcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.retCode)
  return _impl_.retcode_.Release();
}
inline void DoResponse::set_allocated_retcode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.retcode_.IsDefault()) {
          _impl_.retcode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.retCode)
}

// string reqName = 3;
inline void DoResponse::clear_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.ClearToEmpty();
}
inline const std::string& DoResponse::reqname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.reqName)
  return _internal_reqname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_reqname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.reqName)
}
inline std::string* DoResponse::mutable_reqname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqname();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.reqName)
  return _s;
}
inline const std::string& DoResponse::_internal_reqname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqname_.Get();
}
inline void DoResponse::_internal_set_reqname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqname_.Mutable( GetArena());
}
inline std::string* DoResponse::release_reqname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.reqName)
  return _impl_.reqname_.Release();
}
inline void DoResponse::set_allocated_reqname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqname_.IsDefault()) {
          _impl_.reqname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.reqName)
}

// string respResult = 4;
inline void DoResponse::clear_respresult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.respresult_.ClearToEmpty();
}
inline const std::string& DoResponse::respresult() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.respResult)
  return _internal_respresult();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_respresult(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.respresult_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.respResult)
}
inline std::string* DoResponse::mutable_respresult() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_respresult();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.respResult)
  return _s;
}
inline const std::string& DoResponse::_internal_respresult() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.respresult_.Get();
}
inline void DoResponse::_internal_set_respresult(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.respresult_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_respresult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.respresult_.Mutable( GetArena());
}
inline std::string* DoResponse::release_respresult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.respResult)
  return _impl_.respresult_.Release();
}
inline void DoResponse::set_allocated_respresult(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.respresult_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.respresult_.IsDefault()) {
          _impl_.respresult_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.respResult)
}

// string reqTransaction = 5;
inline void DoResponse::clear_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.ClearToEmpty();
}
inline const std::string& DoResponse::reqtransaction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.reqTransaction)
  return _internal_reqtransaction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_reqtransaction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.reqTransaction)
}
inline std::string* DoResponse::mutable_reqtransaction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reqtransaction();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.reqTransaction)
  return _s;
}
inline const std::string& DoResponse::_internal_reqtransaction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reqtransaction_.Get();
}
inline void DoResponse::_internal_set_reqtransaction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reqtransaction_.Mutable( GetArena());
}
inline std::string* DoResponse::release_reqtransaction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.reqTransaction)
  return _impl_.reqtransaction_.Release();
}
inline void DoResponse::set_allocated_reqtransaction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqtransaction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reqtransaction_.IsDefault()) {
          _impl_.reqtransaction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.reqTransaction)
}

// string retContext = 6;
inline void DoResponse::clear_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.ClearToEmpty();
}
inline const std::string& DoResponse::retcontext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Device.V3.DoResponse.retContext)
  return _internal_retcontext();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DoResponse::set_retcontext(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Device.V3.DoResponse.retContext)
}
inline std::string* DoResponse::mutable_retcontext() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retcontext();
  // @@protoc_insertion_point(field_mutable:Device.V3.DoResponse.retContext)
  return _s;
}
inline const std::string& DoResponse::_internal_retcontext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retcontext_.Get();
}
inline void DoResponse::_internal_set_retcontext(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.Set(value, GetArena());
}
inline std::string* DoResponse::_internal_mutable_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retcontext_.Mutable( GetArena());
}
inline std::string* DoResponse::release_retcontext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Device.V3.DoResponse.retContext)
  return _impl_.retcontext_.Release();
}
inline void DoResponse::set_allocated_retcontext(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retcontext_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.retcontext_.IsDefault()) {
          _impl_.retcontext_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Device.V3.DoResponse.retContext)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace V3
}  // namespace Device


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_device_2fv3_2fdevice_2eproto_2epb_2eh
