// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: device/v3/device-c.proto
// Original file comments:
// define syntax used in proto file
#ifndef GRPC_device_2fv3_2fdevice_2dc_2eproto__INCLUDED
#define GRPC_device_2fv3_2fdevice_2dc_2eproto__INCLUDED

#include "device/v3/device-c.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Device {
namespace V3 {

// a gRPC service
class Device final {
 public:
  static constexpr char const* service_full_name() {
    return "Device.V3.Device";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Open is a rpc call and a option is defined for it
    virtual ::grpc::Status Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::Device::V3::OpenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>> AsyncOpen(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::Device::V3::OpenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>> AsyncClose(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncGet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncSet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncAdd(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncDel(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncDelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncDel(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncDelRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncAction(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncAction(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncActionRaw(context, request, cq));
    }
    // option type is http
    virtual ::grpc::Status Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> AsyncMessage(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(AsyncMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>> PrepareAsyncMessage(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>>(PrepareAsyncMessageRaw(context, request, cq));
    }
    // option type is http
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Open is a rpc call and a option is defined for it
      virtual void Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
      virtual void Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option type is http
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>* AsyncOpenRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::OpenReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncDelRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncActionRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncActionRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* AsyncMessageRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Device::V3::DoResponse>* PrepareAsyncMessageRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::Device::V3::OpenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>> AsyncOpen(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::Device::V3::OpenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>> AsyncClose(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncGet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncSet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncAdd(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncDel(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncDelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncDel(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncDelRaw(context, request, cq));
    }
    ::grpc::Status Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncAction(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncAction(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncActionRaw(context, request, cq));
    }
    ::grpc::Status Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::Device::V3::DoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> AsyncMessage(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(AsyncMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>> PrepareAsyncMessage(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>>(PrepareAsyncMessageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, std::function<void(::grpc::Status)>) override;
      void Open(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, std::function<void(::grpc::Status)>) override;
      void Close(::grpc::ClientContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Del(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Action(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, std::function<void(::grpc::Status)>) override;
      void Message(::grpc::ClientContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>* AsyncOpenRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::OpenReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::Device::V3::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncDelRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncActionRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncActionRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* AsyncMessageRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Device::V3::DoResponse>* PrepareAsyncMessageRaw(::grpc::ClientContext* context, const ::Device::V3::DoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Open_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Del_;
    const ::grpc::internal::RpcMethod rpcmethod_Action_;
    const ::grpc::internal::RpcMethod rpcmethod_Message_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Open is a rpc call and a option is defined for it
    virtual ::grpc::Status Open(::grpc::ServerContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response);
    // option type is http
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response);
    // option type is http
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Del(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Action(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
    virtual ::grpc::Status Message(::grpc::ServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response);
    // option type is http
  };
  template <class BaseClass>
  class WithAsyncMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Open() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::Device::V3::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::OpenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::Device::V3::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::OpenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Del() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDel(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Action() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAction(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Message() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessage(::grpc::ServerContext* context, ::Device::V3::DoRequest* request, ::grpc::ServerAsyncResponseWriter< ::Device::V3::DoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Open<WithAsyncMethod_Close<WithAsyncMethod_Get<WithAsyncMethod_Set<WithAsyncMethod_Update<WithAsyncMethod_Add<WithAsyncMethod_Del<WithAsyncMethod_Action<WithAsyncMethod_Message<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Open() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response) { return this->Open(context, request, response); }));}
    void SetMessageAllocatorFor_Open(
        ::grpc::MessageAllocator< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Close() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::OpenRequest* request, ::Device::V3::OpenReply* response) { return this->Close(context, request, response); }));}
    void SetMessageAllocatorFor_Close(
        ::grpc::MessageAllocator< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::OpenRequest, ::Device::V3::OpenReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Set() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Add() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Del() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Del(context, request, response); }));}
    void SetMessageAllocatorFor_Del(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Del(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Action() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Action(context, request, response); }));}
    void SetMessageAllocatorFor_Action(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Action(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Message() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Device::V3::DoRequest* request, ::Device::V3::DoResponse* response) { return this->Message(context, request, response); }));}
    void SetMessageAllocatorFor_Message(
        ::grpc::MessageAllocator< ::Device::V3::DoRequest, ::Device::V3::DoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Device::V3::DoRequest, ::Device::V3::DoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Message(
      ::grpc::CallbackServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Open<WithCallbackMethod_Close<WithCallbackMethod_Get<WithCallbackMethod_Set<WithCallbackMethod_Update<WithCallbackMethod_Add<WithCallbackMethod_Del<WithCallbackMethod_Action<WithCallbackMethod_Message<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Open() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Del() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Action() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Message() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Open() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Del() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Action() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Message() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Open() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Open(context, request, response); }));
    }
    ~WithRawCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Close() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Close(context, request, response); }));
    }
    ~WithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Set() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~WithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Add() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~WithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Del() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Del(context, request, response); }));
    }
    ~WithRawCallbackMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Del(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Action() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Action(context, request, response); }));
    }
    ~WithRawCallbackMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Action(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Message() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Message(context, request, response); }));
    }
    ~WithRawCallbackMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Open() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::OpenRequest, ::Device::V3::OpenReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::OpenRequest, ::Device::V3::OpenReply>* streamer) {
                       return this->StreamedOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::OpenRequest,::Device::V3::OpenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::OpenRequest, ::Device::V3::OpenReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::OpenRequest, ::Device::V3::OpenReply>* streamer) {
                       return this->StreamedClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::Device::V3::OpenRequest* /*request*/, ::Device::V3::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::OpenRequest,::Device::V3::OpenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Del : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Del() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedDel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Del() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Del(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Action() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Action(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Message() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Device::V3::DoRequest, ::Device::V3::DoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Device::V3::DoRequest, ::Device::V3::DoResponse>* streamer) {
                       return this->StreamedMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Message(::grpc::ServerContext* /*context*/, const ::Device::V3::DoRequest* /*request*/, ::Device::V3::DoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Device::V3::DoRequest,::Device::V3::DoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Del<WithStreamedUnaryMethod_Action<WithStreamedUnaryMethod_Message<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Close<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Del<WithStreamedUnaryMethod_Action<WithStreamedUnaryMethod_Message<Service > > > > > > > > > StreamedService;
};

}  // namespace V3
}  // namespace Device


#endif  // GRPC_device_2fv3_2fdevice_2dc_2eproto__INCLUDED
