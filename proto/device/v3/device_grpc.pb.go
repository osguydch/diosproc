// define syntax used in proto file

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: device/v3/device.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Device_Open_FullMethodName    = "/Device.V3.Device/Open"
	Device_Close_FullMethodName   = "/Device.V3.Device/Close"
	Device_Get_FullMethodName     = "/Device.V3.Device/Get"
	Device_Set_FullMethodName     = "/Device.V3.Device/Set"
	Device_Update_FullMethodName  = "/Device.V3.Device/Update"
	Device_Add_FullMethodName     = "/Device.V3.Device/Add"
	Device_Del_FullMethodName     = "/Device.V3.Device/Del"
	Device_Action_FullMethodName  = "/Device.V3.Device/Action"
	Device_Message_FullMethodName = "/Device.V3.Device/Message"
)

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceClient interface {
	// Open is a rpc call and a option is defined for it
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Close(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Get(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Set(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Update(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Add(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Del(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Action(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	Message(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, Device_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Close(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, Device_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Get(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Set(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Update(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Add(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Del(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Action(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Action_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Message(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, Device_Message_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
// All implementations should embed UnimplementedDeviceServer
// for forward compatibility
type DeviceServer interface {
	// Open is a rpc call and a option is defined for it
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	Close(context.Context, *OpenRequest) (*OpenReply, error)
	Get(context.Context, *DoRequest) (*DoResponse, error)
	Set(context.Context, *DoRequest) (*DoResponse, error)
	Update(context.Context, *DoRequest) (*DoResponse, error)
	Add(context.Context, *DoRequest) (*DoResponse, error)
	Del(context.Context, *DoRequest) (*DoResponse, error)
	Action(context.Context, *DoRequest) (*DoResponse, error)
	Message(context.Context, *DoRequest) (*DoResponse, error)
}

// UnimplementedDeviceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (UnimplementedDeviceServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedDeviceServer) Close(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedDeviceServer) Get(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeviceServer) Set(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDeviceServer) Update(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeviceServer) Add(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDeviceServer) Del(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedDeviceServer) Action(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedDeviceServer) Message(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}

// UnsafeDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServer will
// result in compilation errors.
type UnsafeDeviceServer interface {
	mustEmbedUnimplementedDeviceServer()
}

func RegisterDeviceServer(s grpc.ServiceRegistrar, srv DeviceServer) {
	s.RegisterService(&Device_ServiceDesc, srv)
}

func _Device_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Close(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Get(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Set(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Update(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Add(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Del(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Action_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Action(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Device_Message_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Message(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Device_ServiceDesc is the grpc.ServiceDesc for Device service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Device_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Device.V3.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Device_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Device_Close_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Device_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Device_Set_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Device_Update_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Device_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Device_Del_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Device_Action_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Device_Message_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/v3/device.proto",
}
